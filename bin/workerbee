#!/usr/bin/env python
# encoding: utf-8
"""Report progress of a workerbee experiment

Usage:
  wbee <experiment_id> [--host=<host> --port=<port> --user=<user> --password=<password> --dbname=<dbname>]
  wbee (--help)
  wbee --version

Options:
  <experiment_id>         report progress for this experiment
  --host=<host>           database server host or socket directory
  --port=<port>           database server port
  --user=<user>           database user name
  --password=<password>   database user password
  --dbname=<dbname>       database name to connect to
  --help                  show this screen
  -v --version            report workerbee version
"""
from docopt import docopt
from functools import partial
import curses
import time

import workerbee  # needed for version
from workerbee.postgresql import DBConnectionInfo, get_db_handle
from workerbee.stats import get_stats_report


def load_db(host=None, user=None, password=None, database=None, port=None):
    db_info = DBConnectionInfo(host=host, user=user, password=password, database=database, port=port)
    return get_db_handle(db_info=db_info)


def report_progress(db, experiment_id, scr):
    title = 'workerbee'
    scr.addstr(1, 2, 'workerbee', curses.A_UNDERLINE) 
    scr.addstr(1, 2 + len(title) + 2, experiment_id) 
    report, stats = get_stats_report(db, experiment_id)

    h_width = max([len(r[0]) for r in report]) + 2

    i = 0
    for i, (heading, value) in enumerate(report, 3):
        heading_padded = heading.rjust(h_width - 1).ljust(h_width)
        scr.addstr(i, 0, heading_padded, curses.A_STANDOUT)
        scr.addstr(i, h_width + 1, value)
    
    scr.addstr(i + 2, 1, "Press 'q' to quit")
    scr.refresh()

    av_period_between_completions = (1 / stats.jobs_per_sec)
     # refresh 4x more often than we expect changes (to look smoother)
    return av_period_between_completions / 4


def curses_ui(db, experiment_id, stdscr):
    curses.halfdelay(1)
    curses.curs_set(0)

    wait_time = 0
    last_update = time.time()

    while True:

        # Allow for quitting with q
        c = stdscr.getch()
        if c == ord('q'):
            break
        
        if time.time() - last_update > wait_time:
            last_update = time.time()
            wait_time = report_progress(db, experiment_id, stdscr)

        time.sleep(0.1)


if __name__ == "__main__":
    a = docopt(__doc__, version='workerbee v{}'.format(workerbee.__version__))
    _db = load_db(host=a['--host'], user=a['--user'], 
                  password=a['--password'], database=a['--dbname'], 
                  port=a['--port'])
    main_loop = partial(curses_ui, _db, a['<experiment_id>'])
    curses.wrapper(main_loop)
